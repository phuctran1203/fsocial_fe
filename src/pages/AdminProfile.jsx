import React, { useEffect, useState } from "react";
import { JumpingInput, JumpingSelect } from "../components/Field";
import Button from "../components/Button";

import { adminStore } from "../store/adminStore";

import { LogoNoBG } from "../components/Icon";
import {
	combineIntoAvatarName,
	combineIntoDisplayName,
} from "@/utils/combineName";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { useForm } from "react-hook-form";
import { regexEmail, regexName, regexPassword } from "@/config/regex";
import { AtSign, ChevronDown, Eye, EyeOff, UserRoundIcon } from "lucide-react";
import {
	dayOptions,
	monthOptions,
	yearOptions,
} from "@/config/globalVariables";

const AdminProfile = () => {
	const { user } = adminStore();
	const {
		register,
		formState: { errors, isValid },
		reset,
		getValues,
		watch,
	} = useForm({ mode: "all" });
	const newPassword = watch("newPassword");

	useEffect(() => {
		reset({
			firstName: user.firstName,
			lastName: user.lastName,
			day: user.day,
			month: user.month,
			year: user.year,
			gender: user.gender,
			username: user.username,
			email: user.email,
		});
	}, []);

	// Handle ·∫©n hi·ªán m·∫≠t kh·∫©u
	const [isShowOldPassword, setIsShowOldPassword] = useState(false);
	const [isShowNewPassword, setIsShowNewPassword] = useState(false);
	const [isShowReNewPassword, setIsShowReNewPassword] = useState(false);

	const handleImageUpload = (event) => {
		const file = event.target.files[0];
		if (file) {
			const imageUrl = URL.createObjectURL(file);
			updateField("avatar", { value: imageUrl });
		}
	};

	// **üîπ H√†m x·ª≠ l√Ω c·∫≠p nh·∫≠t th√¥ng tin v√†o store**
	const handleUpdateProfile = () => {};

	const hours = new Date().getHours();

	return (
		<div className="relative overflow-hidden bg-background shadow border rounded-lg flex-grow p-10">
			<LogoNoBG
				className="absolute left-0 bottom-0 translate-y-1/2 -rotate-12 size-56"
				fill="fill-gray-3light"
			/>
			{/* Ti√™u ƒë·ªÅ */}
			<h5>
				{hours < 12 && "Ch√†o bu·ªïi s√°ng"}
				{hours <= 18 && "Ch√†o bu·ªïi chi·ªÅu"}
				{hours > 18 && "Ch√†o bu·ªïi t·ªëi"},{" "}
				<font className="text-primary-gradient">
					{combineIntoDisplayName(user.firstName, user.lastName)}
				</font>
				üëã
			</h5>
			<p className="text-gray fs-sm">
				C·∫≠p nh·∫≠t th√¥ng tin c·ªßa b·∫°n t·∫°i ƒë√¢y. Kh√¥ng chia s·∫ª th√¥ng tin ƒë·ªÉ tr√°nh r·ªßi
				ro ph√°t sinh.
			</p>

			{/* Form ch·ªânh s·ª≠a */}
			<div className="max-w-[1080px] mx-auto grid grid-cols-2 gap-10 mt-12">
				{/* th√¥ng tin c√° nh√¢n */}
				<div className="space-y-5">
					<p className="font-medium">Th√¥ng tin c√° nh√¢n</p>

					<div className="grid grid-cols-2 gap-2">
						<JumpingInput
							label="T√™n"
							name="firstName"
							register={register}
							errors={errors}
							validateOptions={{
								required: "T√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
								pattern: {
									value: regexName,
									message: "T√™n kh√¥ng ƒë∆∞·ª£c ch·ª©a s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát",
								},
							}}
						/>
						<JumpingInput
							label="H·ªç"
							name="lastName"
							register={register}
							errors={errors}
							validateOptions={{
								required: "H·ªç kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
								pattern: {
									value: regexName,
									message: "H·ªç kh√¥ng ƒë∆∞·ª£c ch·ª©a s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát",
								},
							}}
						/>
					</div>

					<div className="grid grid-cols-3 gap-2">
						<JumpingSelect
							label="Ng√†y"
							name="day"
							register={register}
							errors={errors}
							options={dayOptions}
							disabled={true}
							icon={<ChevronDown />}
						/>
						<JumpingSelect
							label="Th√°ng"
							name="month"
							register={register}
							errors={errors}
							options={monthOptions}
							disabled={true}
							icon={<ChevronDown />}
						/>
						<JumpingSelect
							label="NƒÉm"
							name="year"
							register={register}
							errors={errors}
							options={yearOptions}
							disabled={true}
							icon={<ChevronDown />}
						/>
					</div>

					<JumpingSelect
						label="Gi·ªõi t√≠nh"
						name="gender"
						register={register}
						errors={errors}
						options={{
							0: "Nam",
							1: "N·ªØ",
							2: "Kh√°c",
							3: "Kh√¥ng mu·ªën ti·∫øt l·ªô",
						}}
						icon={<ChevronDown />}
					/>

					{/* Avatar + Button thay ·∫£nh ƒë·∫°i di·ªán */}
					<div className="p-6 flex items-center gap-6">
						<div className="ring-4 ring-offset-4 rounded-full ring-gray-2light">
							<Avatar className="size-32">
								<AvatarImage src={user.avatar} />
								<AvatarFallback>
									{combineIntoAvatarName(user.firstName, user.lastName)}
								</AvatarFallback>
							</Avatar>
						</div>

						<label className="btn-secondary w-fit px-8 py-3 cursor-pointer">
							Thay ·∫£nh ƒë·∫°i di·ªán
							<input
								type="file"
								className="hidden"
								onChange={handleImageUpload} //  C·∫≠p nh·∫≠t avatar khi ch·ªçn ·∫£nh m·ªõi
							/>
						</label>
					</div>
				</div>

				<div className="space-y-8">
					{/* th√¥ng tin ƒëƒÉng nh·∫≠p */}
					<div className="space-y-5">
						<p className="font-medium">Th√¥ng tin ƒëƒÉng nh·∫≠p</p>
						<JumpingInput
							label="T√™n ƒëƒÉng nh·∫≠p"
							name="username"
							register={register}
							errors={errors}
							validateOptions={{
								required: "T√™n ƒëƒÉng nh·∫≠p kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
							}}
							icon={<UserRoundIcon className="size-5" />}
						/>

						<JumpingInput
							label="Email"
							name="email"
							register={register}
							errors={errors}
							validateOptions={{
								required: "Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
								pattern: {
									value: regexEmail,
									message: "Email kh√¥ng h·ª£p l·ªá",
								},
							}}
							icon={<AtSign className="size-5" />}
						/>
					</div>
					{/* ƒê·ªïi m·∫≠t kh·∫©u */}
					<div className="space-y-5">
						{/* ƒê·ªïi m·∫≠t kh·∫©u */}
						<p className="font-medium">ƒê·ªïi m·∫≠t kh·∫©u</p>
						<JumpingInput
							type={isShowOldPassword ? "text" : "password"}
							label="M·∫≠t kh·∫©u c≈©"
							name="oldPassword"
							register={register}
							errors={errors}
							validateOptions={{
								required: "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
							}}
							icon={
								<div
									className="cursor-pointer"
									onClick={() => setIsShowOldPassword(!isShowOldPassword)}
								>
									{!isShowOldPassword ? (
										<Eye className="size-5" />
									) : (
										<EyeOff className="size-5" />
									)}
								</div>
							}
						/>

						<JumpingInput
							type={isShowNewPassword ? "text" : "password"}
							label="M·∫≠t kh·∫©u m·ªõi"
							name="newPassword"
							register={register}
							errors={errors}
							validateOptions={{
								required: "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
								pattern: {
									value: regexPassword,
									message: "M·∫≠t kh·∫©u t·ª´ 8-20 k√≠ t·ª±, bao g·ªìm c·∫£ ch·ªØ v√† s·ªë",
								},
							}}
							icon={
								<div
									className="cursor-pointer"
									onClick={() => setIsShowNewPassword(!isShowNewPassword)}
								>
									{!isShowNewPassword ? (
										<Eye className="size-5" />
									) : (
										<EyeOff className="size-5" />
									)}
								</div>
							}
						/>

						<JumpingInput
							type={isShowReNewPassword ? "text" : "password"}
							label="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi"
							name="reNewPassword"
							register={register}
							errors={errors}
							validateOptions={{
								required: "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
								pattern: {
									value: regexPassword,
									message: "M·∫≠t kh·∫©u t·ª´ 8-20 k√≠ t·ª±, bao g·ªìm c·∫£ ch·ªØ v√† s·ªë",
								},
								validate: (value) =>
									value === newPassword ||
									"M·∫≠t kh·∫©u nh·∫≠p l·∫°i kh√¥ng kh·ªõp v·ªõi m·∫≠t kh·∫©u m·ªõi",
							}}
							icon={
								<div
									className="cursor-pointer"
									onClick={() => setIsShowReNewPassword(!isShowReNewPassword)}
								>
									{!isShowReNewPassword ? (
										<Eye className="size-5" />
									) : (
										<EyeOff className="size-5" />
									)}
								</div>
							}
						/>
					</div>
				</div>
			</div>

			{/* üîπ C·∫≠p nh·∫≠t th√¥ng tin khi ·∫•n n√∫t */}
			<div className="mt-6 flex justify-center">
				<Button
					onClick={handleUpdateProfile}
					className="btn-primary px-8 py-3 w-fit"
				>
					C·∫≠p nh·∫≠t thay ƒë·ªïi
				</Button>
			</div>
		</div>
	);
};

export default AdminProfile;
